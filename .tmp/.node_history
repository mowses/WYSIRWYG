Components.find([1,2])
Components.find([1,2])
.populate('component')
.exec(function(err, data) {
if (err || !data) return res.badRequest(err);
return res.json(data);
Components.find([1,2]).populate('component').exec(function(err, data) {return res.json(data);});
Components.find([1,2]).populate('component');
Components.find([1,2]).populate('component').exec();
Components.find([1,2]).populate('component').exec(function(){});
Components.find([1,2]).populate('component').exec(function(err, row){console.log(row);});
Components.findOne(2).populate('component').exec(function(err, row){console.log(row);});
Components.findOne(2).populate('subcomponents').exec(function(err, row){console.log(row);});
Components.findOne(2).populate('subcomponentsx').exec(function(err, row){console.log(row);});
Components.findOne(2).populate('subcomponents').exec(function(err, row){console.log(row);});
Components
Components.query();
Components.query('select * from components');
Components.query('select * from components', function(err, data){console.log(data);});
Components.query('EXECUTE getcomponents(2)', function(err, data) {
if (err || !data) return res.badRequest(err);
console.log(arguments);
return res.json(data);
});
Components.query('EXECUTE getcomponents(2)', function(err, data) {});
Components.query('EXECUTE getcomponents(2)', function(err, data) {console.log(arguments);});
Components.query('( WITH recursive _subcomponents(id) AS ( SELECT * , array[id] AS found_components FROM components WHERE id IN(WITH RECURSIVE _subcomponents(id) AS ( SELECT subcomponents.*, array[subcomponents.components_component] AS found_components FROM components_subcomponents__components_component AS subcomponents WHERE components_subcomponents IN (2) UNION ALL SELECT subcomponents.*, found_components || subcomponents.components_component FROM components_subcomponents__components_component AS subcomponents INNER JOIN _subcomponents ON _subcomponents.components_component = subcomponents.components_subcomponents WHERE NOT subcomponents.components_component = ANY(found_components)) SELECT DISTINCT(components_component) FROM _subcomponents) UNION ALL SELECT components.*, found_components || components.id FROM components INNER JOIN _subcomponents ON _subcomponents."extendsFrom" = components.id WHERE NOT components.id = ANY(found_components)) SELECT DISTINCT ON( id) * FROM ( SELECT * FROM _subcomponents UNION ALL SELECT *, NULL FROM components WHERE id IN (2)) AS components_w_subcomponents)', function(err, data) {console.log(arguments);});
Components.query('( WITH recursive _subcomponents(id) AS ( SELECT * , array[id] AS found_components FROM components WHERE id IN(WITH RECURSIVE _subcomponents(id) AS ( SELECT subcomponents.*, array[subcomponents.components_component] AS found_components FROM components_subcomponents__components_component AS subcomponents WHERE components_subcomponents IN (2) UNION ALL SELECT subcomponents.*, found_components || subcomponents.components_component FROM components_subcomponents__components_component AS subcomponents INNER JOIN _subcomponents ON _subcomponents.components_component = subcomponents.components_subcomponents WHERE NOT subcomponents.components_component = ANY(found_components)) SELECT DISTINCT(components_component) FROM _subcomponents) UNION ALL SELECT components.*, found_components || components.id FROM components INNER JOIN _subcomponents ON _subcomponents."extendsFrom" = components.id WHERE NOT components.id = ANY(found_components)) SELECT DISTINCT ON( id) * FROM ( SELECT * FROM _subcomponents UNION ALL SELECT *, NULL FROM components WHERE id IN (2)) AS components_w_subcomponents)', function(err, data) {console.log(data);});
Components.query('EXECUTE getcomponents(2)', function(err, data) {console.log(arguments);});
Components.query('( WITH recursive _subcomponents(id) AS ( SELECT * , array[id] AS found_components FROM components WHERE id IN(WITH RECURSIVE _subcomponents(id) AS ( SELECT subcomponents.*, array[subcomponents.components_component] AS found_components FROM components_subcomponents__components_component AS subcomponents WHERE components_subcomponents IN (2) UNION ALL SELECT subcomponents.*, found_components || subcomponents.components_component FROM components_subcomponents__components_component AS subcomponents INNER JOIN _subcomponents ON _subcomponents.components_component = subcomponents.components_subcomponents WHERE NOT subcomponents.components_component = ANY(found_components)) SELECT DISTINCT(components_component) FROM _subcomponents) UNION ALL SELECT components.*, found_components || components.id FROM components INNER JOIN _subcomponents ON _subcomponents."extendsFrom" = components.id WHERE NOT components.id = ANY(found_components)) SELECT DISTINCT ON( id) * FROM ( SELECT * FROM _subcomponents UNION ALL SELECT *, NULL FROM components WHERE id IN (2)) AS components_w_subcomponents)', function(err, data) {console.log(err);});
Components.query('EXECUTE getcomponents(2)', function(err, data) {console.log(arguments);});
Components.query('EXECUTE getcomponents(2)', function(err, data) {console.log(arguments);});
Components.query('EXECUTE getcomponents(2)', function(err, data) {console.log(arguments);});
Components.query('EXECUTE getcomponents(2)', function(err, data) {console.log(arguments);});
Components.query('EXECUTE getcomponents(2)', function(err, data) {console.log(data);});
Components.query('EXECUTE getcomponents(2)', function(err, data) {console.log(err);});
Components.query('WITH recursive _subcomponents(id) AS ( SELECT * , array[id] AS found_components FROM components WHERE id IN(WITH RECURSIVE _subcomponents(id) AS ( SELECT subcomponents.*, array[subcomponents.components_component] AS found_components FROM components_subcomponents__components_component AS subcomponents WHERE components_subcomponents IN ($1) UNION ALL SELECT subcomponents.*, found_components || subcomponents.components_component FROM components_subcomponents__components_component AS subcomponents INNER JOIN _subcomponents ON _subcomponents.components_component = subcomponents.components_subcomponents WHERE NOT subcomponents.components_component = ANY(found_components)) SELECT DISTINCT(components_component) FROM _subcomponents) UNION ALL SELECT components.*, found_components || components.id FROM components INNER JOIN _subcomponents ON _subcomponents."extendsFrom" = components.id WHERE NOT components.id = ANY(found_components)) SELECT DISTINCT ON( id) * FROM ( SELECT * FROM _subcomponents UNION ALL SELECT *, NULL FROM components WHERE id IN ($1)) AS components_w_subcomponents', function(err, data) {console.log(err);});
Components.query('WITH recursive _subcomponents(id) AS ( SELECT * , array[id] AS found_components FROM components WHERE id IN(WITH RECURSIVE _subcomponents(id) AS ( SELECT subcomponents.*, array[subcomponents.components_component] AS found_components FROM components_subcomponents__components_component AS subcomponents WHERE components_subcomponents IN ($1) UNION ALL SELECT subcomponents.*, found_components || subcomponents.components_component FROM components_subcomponents__components_component AS subcomponents INNER JOIN _subcomponents ON _subcomponents.components_component = subcomponents.components_subcomponents WHERE NOT subcomponents.components_component = ANY(found_components)) SELECT DISTINCT(components_component) FROM _subcomponents) UNION ALL SELECT components.*, found_components || components.id FROM components INNER JOIN _subcomponents ON _subcomponents."extendsFrom" = components.id WHERE NOT components.id = ANY(found_components)) SELECT DISTINCT ON( id) * FROM ( SELECT * FROM _subcomponents UNION ALL SELECT *, NULL FROM components WHERE id IN ($1)) AS components_w_subcomponents', function(err, data) {console.log(err);});
Components.query('WITH recursive _subcomponents(id) AS ( SELECT * , array[id] AS found_components FROM components WHERE id IN(WITH RECURSIVE _subcomponents(id) AS ( SELECT subcomponents.*, array[subcomponents.components_component] AS found_components FROM components_subcomponents__components_component AS subcomponents WHERE components_subcomponents IN (2) UNION ALL SELECT subcomponents.*, found_components || subcomponents.components_component FROM components_subcomponents__components_component AS subcomponents INNER JOIN _subcomponents ON _subcomponents.components_component = subcomponents.components_subcomponents WHERE NOT subcomponents.components_component = ANY(found_components)) SELECT DISTINCT(components_component) FROM _subcomponents) UNION ALL SELECT components.*, found_components || components.id FROM components INNER JOIN _subcomponents ON _subcomponents."extendsFrom" = components.id WHERE NOT components.id = ANY(found_components)) SELECT DISTINCT ON( id) * FROM ( SELECT * FROM _subcomponents UNION ALL SELECT *, NULL FROM components WHERE id IN (2)) AS components_w_subcomponents', function(err, data) {console.log(err);});
Components.query('WITH recursive _subcomponents(id) AS ( SELECT * , array[id] AS found_components FROM components WHERE id IN(WITH RECURSIVE _subcomponents(id) AS ( SELECT subcomponents.*, array[subcomponents.components_component] AS found_components FROM components_subcomponents__components_component AS subcomponents WHERE components_subcomponents IN (2) UNION ALL SELECT subcomponents.*, found_components || subcomponents.components_component FROM components_subcomponents__components_component AS subcomponents INNER JOIN _subcomponents ON _subcomponents.components_component = subcomponents.components_subcomponents WHERE NOT subcomponents.components_component = ANY(found_components)) SELECT DISTINCT(components_component) FROM _subcomponents) UNION ALL SELECT components.*, found_components || components.id FROM components INNER JOIN _subcomponents ON _subcomponents."extendsFrom" = components.id WHERE NOT components.id = ANY(found_components)) SELECT DISTINCT ON( id) * FROM ( SELECT * FROM _subcomponents UNION ALL SELECT *, NULL FROM components WHERE id IN (2)) AS components_w_subcomponents', function(err, data) {console.log(data);});
components.find()
Components.find()
Components.find().exec(function(err, data){console.log(err, data);})
Components.create({component:1, subcomponent:2, config:{}}).exec(function(err, data){console.log(err, data);})
Components_subcomponents.create({component:1, subcomponent:2, config:{}}).exec(function(err, data){console.log(err, data);})
Components_subcomponents.find().exec(function(err, data){console.log(err, data);})
Components_subcomponents.find().populate('component').exec(function(err, data){console.log(err, data);})
Components_subcomponents.find().populate('component').exec(function(err, data){console.log(err, data);})
Components_subcomponents.find().populate('subcomponent').exec(function(err, data){console.log(err, data);})
Components.find().exec(function(err, data){console.log(err, data);})
Components.find().exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components.find().populate('prototypeFrom').exec(function(err, data){console.log(err, data);})
Components.find().populate('prototypeFrom').exec(function(err, data){console.log(err, data);})
Components.find().populate('prototypeFrom').exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponentsxxx').exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components_subcomponents.create({component:1, subcomponent:2, config:{}}).exec(function(err, data){console.log(err, data);})
Components_subcomponents.create({component:1, subcomponent:2, config:{}}).exec(function(err, data){console.log(err, data);})
Components.create({name:'un'}).exec(function(err, data){console.log(err, data);})
Components.create({name:'unaaaaa'}).exec(function(err, data){console.log(err, data);})
Components.create({name:'duuuuun'}).exec(function(err, data){console.log(err, data);})
Components.find().populate('subcomponents').exec(function(err, data){console.log(err, data);})
Components.find().populate('prototypeFrom').exec(function(err, data){console.log(err, data);})
Components.find().populate('prototypeFrom').exec(function(err, data){console.log(err, data);})
Components.find().populate('prototypeFrom').exec(function(err, data){console.log(err, data);})
Controller
sails
ComponentsController
ComponentsController
sails.config
sails.config.ComponentsController
sails
sails
3
Controllers
sails.config
sails.config.models
sails
Models
models
Components
Components.schema
Object.keys(Components.schema)
